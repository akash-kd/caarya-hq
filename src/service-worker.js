/* eslint-disable no-restricted-globals */
import { clientsClaim } from "workbox-core";

// Used to limit entries in cache, remove entries after a certain period of time
import { ExpirationPlugin } from "workbox-expiration";

import { precacheAndRoute, createHandlerBoundToURL } from "workbox-precaching";
import { registerRoute } from "workbox-routing";
import {
  NetworkFirst,
  StaleWhileRevalidate,
  CacheFirst,
} from "workbox-strategies";

// Used for filtering matches based on status code, header, or both
import { CacheableResponsePlugin } from "workbox-cacheable-response";

import {
  pageCache,
  imageCache,
  staticResourceCache,
  googleFontsCache,
  offlineFallback,
} from "workbox-recipes";

clientsClaim();

/*
 * Precache all of the assets generated by your build process.
 * Their URLs are injected into the manifest variable below.
 * This variable must be present somewhere in your service worker file,
 * even if you decide not to use precaching. See https://cra.link/PWA
 * Should always be written before registerRoute
 */

precacheAndRoute(self.__WB_MANIFEST);

/* Set up App Shell-style routing, so that all navigation requests
 *are fulfilled with your index.html shell. Learn more at
 * https://developers.google.com/web/fundamentals/architecture/app-shell
 */
const fileExtensionRegexp = new RegExp("/[^/?]+\\.[^/]+$");

registerRoute(
  // Return false to exempt requests from being fulfilled by index.html.
  ({ request, url }) => {
    // If this isn't a navigation, skip.
    if (request.mode !== "navigate") {
      return false;
    } // If this is a URL that starts with /_, skip.

    if (url.pathname.startsWith("/_")) {
      return false;
    } // If this looks like a URL for a resource, because it contains // a file extension, skip.

    if (url.pathname.match(fileExtensionRegexp)) {
      return false;
    } // Return true to signal that we want to use the handler.

    return true;
  },
  createHandlerBoundToURL(process.env.PUBLIC_URL + "/index.html")
);

// This allows the web app to trigger skipWaiting via registration.waiting.postMessage({type: 'SKIP_WAITING'})
self.addEventListener("message", (event) => {
  if (event.data && event.data.type === "SKIP_WAITING") {
    self.skipWaiting();
  }
});

// Workbox Recipes

/**
 * Google Fonts caching
 * Caches stylesheets with stale while revalidate strategy
 * Caches fonts with cache first strategy (30 font files for a year)
 */

googleFontsCache();

/**
 * The static resources cache recipe allows your service worker to respond to a request
 * for static resources, specifically CSS, JavaScript, and Web Worker requests, with a
 * stale-while-revalidate caching strategy so those assets can be quickly served from the cache
 * and be updated in the background.
 */

staticResourceCache();

/**
 * The logic for static resources cache recipe is same as below:
 */

// registerRoute(
//   // Check to see if the request's destination is style for stylesheets, script for JavaScript, or worker for web worker
//   ({ request }) =>
//     request.destination === "style" ||
//     request.destination === "script" ||
//     request.destination === "worker",
//   // Use a Stale While Revalidate caching strategy
//   new StaleWhileRevalidate({
//     // Put all cached files in a cache named 'assets'
//     cacheName: "assets",
//     plugins: [
//       // Ensure that only requests that result in a 200 status are cached
//       new CacheableResponsePlugin({
//         statuses: [200],
//       }),
//     ],
//   })
// );

/**
 * The image cache recipe allows your service worker to respond to a request for
 * images with a cache-first caching strategy so that once they're available in cache
 * a user doesn't need to make another request for them.
 */

imageCache();

/**
 * The logic for image cache is same as below:
 */

// Cache images with a Cache First strategy
// registerRoute(
//   // Check to see if the request's destination is style for an image
//   ({ request }) => request.destination === "image",
//   // Use a Cache First caching strategy
//   new CacheFirst({
//     // Put all cached files in a cache named 'images'
//     cacheName: "images",
//     plugins: [
//       // Ensure that only requests that result in a 200 status are cached
//       new CacheableResponsePlugin({
//         statuses: [0, 200],
//       }),
//       // Don't cache more than 50 items, and expire them after 30 days
//       new ExpirationPlugin({
//         maxEntries: 60,
//         maxAgeSeconds: 30 * 24 * 60 * 60, // 30 Days
//       }),
//     ],
//   })
// );

/**
 * Cache page navigation (html) with a Network First strategy
 * Can use Page cache recipe
 */
registerRoute(
  // Check to see if the request is a navigation to a new page
  ({ request }) => request.mode === "navigate",
  // Use a Network First caching strategy
  new NetworkFirst({
    // Put all cached files in a cache named 'pages'
    cacheName: "pages",
    plugins: [
      // Ensure that only requests that result in a 200 status are cached
      new CacheableResponsePlugin({
        statuses: [200],
      }),
    ],
  })
);

// Custom Caching

// Caching requests that included the string dashboard and has a status of 200
registerRoute(
  // Add in any other file extensions or routing criteria as needed.
  ({ url }) => url.pathname.includes("dashboard/personal"),
  new StaleWhileRevalidate({
    cacheName: "Dashboard",
    plugins: [
      // Ensure that only requests that result in a 200 status are cached
      new CacheableResponsePlugin({
        statuses: [200],
      }),
      // Ensure that once this runtime cache reaches a maximum size the
      // least-recently used are removed.
      new ExpirationPlugin({
        maxEntries: 10,
        maxAgeSeconds: 2 * 24 * 60 * 60, // 2 Day
      }),
    ],
  })
);

// Caching token
registerRoute(
  // Add in any other file extensions or routing criteria as needed.
  ({ url }) => url.pathname.includes("dashboard/token"),
  new NetworkFirst({
    cacheName: "Token",
    plugins: [
      // Ensure that only requests that result in a 200 status are cached
      new CacheableResponsePlugin({
        statuses: [200],
      }),
      // Ensure that once this runtime cache reaches a maximum size the
      // least-recently used are removed.
      new ExpirationPlugin({
        maxEntries: 1,
        maxAgeSeconds: 1 * 24 * 60 * 60, // 1 Day
      }),
    ],
  })
);
